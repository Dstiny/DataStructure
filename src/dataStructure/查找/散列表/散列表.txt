
1.1概述

    散列技术是在记录存储位置和他的关键字之间建立了一个确定的关系f，使得每个关键字key对应一个存储位置f(key)。

    根据对应关系找到给定值key的映射。

    这样对应的关系f称为散列函数，又称哈希函数。

    采用散列技术将记录存储在一块连续的存储空间中，这块连续存储空间称为散列表或哈希表。
    那么关键字对应的记录存储位置我们称为散列地址。

    散列技术既是一种存储方法。也是一种查找方法。



1.2散列函数的构造

    什么算最好的散列函数：

        计算简单。
        散列地址分布均匀。


    常用的散列函数构造方法：

        直接定址法：取关键字某个线性函数为散列地址。
        评价：优点是简单、均匀、也不会冲突。但问题是这需要事先知道关键字的分布情况，
        适合查找表较小且连续的情况


        数字分析法：关键字位数较多。抽取，使用关键字的一部分来计算散列函数存储位置的方法。
        散列中常用的手段。
        评价：适合处理关键字位数比较大的情况，如果事先知道关键字的分布且关键字若干位分布均匀，就可以考虑。


        平方取中法：假设关键字1234，那么他的平方为1522756，再抽取中间三位就是227，用作散列地址。
        点评：适合于不知道关键字的分布，而位数又不是很大的情况。


        折叠法：将关键字从左到右分割成位数相等的几部分（最后一部分位数不够可以短些），
        然后将这几部分叠加求和，并案散列表表长，取最后几位作为散列地址。
        点评：折叠法事先不需要知道关键字的分布，适合关键字位数较多情况。


        除留余数法：最常用的，f(key)=key mod p (p<=m)
        取模。事实上，不仅可以对关键字直接取模，也可以在折叠，平方取中后再取模。
        该方法关键在于选择合适的p。
        前辈的经验，若散列表表长为m，通常p为小于或等于m（最好接近m）的最小质数或不包含小于20质因子的合数。


        随机数法：选择一个随机数，取关键字的随机函数值为他的散列地址。f（key）=random（key）。
        当关键字长度不等时，采用这个方法比较合适。


    现实中，应该视不同情况采用不同的散列函数。一些考虑的因素提供参考：

        计算散列地址所需时间。
        关键字长度。
        撒列表大小
        关键字分布情况
        记录查找的频率



1.3处理散列冲突的方法

    开放定址法：一旦发生冲突，就去寻找下一个空的散列地址，只需要表足够大，空的散列地址总能找到，并将记录存入。

    再散列函数：每当发生散列冲突时，换一个散列函数计算。

    链接址法：可能会造成很多冲突的散列函数说，提供了绝不会出现找不到地址的保障。
    当然，就带来了查找时需要遍历单链表的性能损耗。


    公共溢出法：为所有冲突的关键字建立一个溢出区存放。